{
  "tasks": {
    "clobber": {
      "name": "clobber",
      "category": "30.maintain",
      "description": "hard resets to HEAD of origin and cleans the local repo",
      "env": {
        "BRANCH": "$(git branch --show-current)"
      },
      "steps": [
        {
          "exec": "git checkout -b scratch",
          "name": "save current HEAD in \"scratch\" branch"
        },
        {
          "exec": "git checkout $BRANCH"
        },
        {
          "exec": "git fetch origin",
          "name": "fetch latest changes from origin"
        },
        {
          "exec": "git reset --hard origin/$BRANCH",
          "name": "hard reset to origin commit"
        },
        {
          "exec": "git clean -fdx",
          "name": "clean all untracked files"
        },
        {
          "say": "ready to rock! (unpushed commits are under the \"scratch\" branch)"
        }
      ],
      "condition": "git diff --exit-code > /dev/null"
    },
    "test": {
      "name": "test",
      "category": "10.test",
      "description": "Run tests for tilediiif.* packages.",
      "steps": [
        {
          "spawn": "test:tilediiif.core"
        },
        {
          "spawn": "test:tilediiif.tools"
        },
        {
          "spawn": "test:tilediiif.server"
        }
      ]
    },
    "typecheck-python": {
      "name": "typecheck-python",
      "category": "30.maintain",
      "description": "Check Python types for tilediiif.* packages.",
      "steps": [
        {
          "spawn": "typecheck-python:tilediiif.core"
        },
        {
          "spawn": "typecheck-python:tilediiif.tools"
        },
        {
          "spawn": "typecheck-python:tilediiif.server"
        }
      ]
    },
    "format-python-code": {
      "name": "format-python-code",
      "category": "30.maintain",
      "description": "Format Python code of tilediiif.* packages.",
      "steps": [
        {
          "spawn": "format-python-code:tilediiif.core"
        },
        {
          "spawn": "format-python-code:tilediiif.tools"
        },
        {
          "spawn": "format-python-code:tilediiif.server"
        }
      ]
    },
    "create-release:tilediiif.core": {
      "name": "create-release:tilediiif.core",
      "category": "20.release",
      "description": "Generate a tagged release commit for tilediiif.core using standard-version",
      "steps": [
        {
          "exec": "npx standard-version --commit-all --path . --tag-prefix \"tilediiif.core-v\""
        }
      ],
      "condition": "test \"$(git status --porcelain)\" == \"\"",
      "cwd": "tilediiif.core"
    },
    "ensure-checkout-is-releaseable:tilediiif.core": {
      "name": "ensure-checkout-is-releaseable:tilediiif.core",
      "category": "20.release",
      "description": "Fail with an error if the working copy is not a clean checkout of a tilediiif.core release tag.",
      "steps": [
        {
          "exec": "        test \"$(git rev-parse HEAD)\" == \"$(git rev-parse tags/tilediiif.core-v0.1.0^{commit})\" \\\n          && test \"$(git status --porcelain)\" == \"\" \\\n          || (echo \"Error: the git checkout must be clean and tagged as tilediiif.core-v0.1.0\" 1>&2; exit 1)\n      "
        }
      ]
    },
    "typecheck-python:tilediiif.core": {
      "name": "typecheck-python:tilediiif.core",
      "category": "30.maintain",
      "description": "Typecheck tilediiif.core with mypy",
      "steps": [
        {
          "exec": "\\\n        cd \"tilediiif.core\" \\\n        && poetry run mypy --namespace-packages \\\n          -p tilediiif.core \\\n          -p tests"
        }
      ]
    },
    "format-python-code:tilediiif.core": {
      "name": "format-python-code:tilediiif.core",
      "category": "30.maintain",
      "description": "Format Python code of tilediiif.core.",
      "steps": [
        {
          "exec": "cd \"tilediiif.core\" && poetry run isort . ; poetry run black . ; poetry run flake8"
        }
      ]
    },
    "test:tilediiif.core": {
      "name": "test:tilediiif.core",
      "category": "10.test",
      "steps": [
        {
          "exec": "cd \"tilediiif.core\" && poetry run pytest"
        }
      ]
    },
    "create-release:tilediiif.tools": {
      "name": "create-release:tilediiif.tools",
      "category": "20.release",
      "description": "Generate a tagged release commit for tilediiif.tools using standard-version",
      "steps": [
        {
          "exec": "npx standard-version --commit-all --path . --tag-prefix \"tilediiif.tools-v\""
        }
      ],
      "condition": "test \"$(git status --porcelain)\" == \"\"",
      "cwd": "tilediiif.tools"
    },
    "ensure-checkout-is-releaseable:tilediiif.tools": {
      "name": "ensure-checkout-is-releaseable:tilediiif.tools",
      "category": "20.release",
      "description": "Fail with an error if the working copy is not a clean checkout of a tilediiif.tools release tag.",
      "steps": [
        {
          "exec": "        test \"$(git rev-parse HEAD)\" == \"$(git rev-parse tags/tilediiif.tools-v0.1.0^{commit})\" \\\n          && test \"$(git status --porcelain)\" == \"\" \\\n          || (echo \"Error: the git checkout must be clean and tagged as tilediiif.tools-v0.1.0\" 1>&2; exit 1)\n      "
        }
      ]
    },
    "typecheck-python:tilediiif.tools": {
      "name": "typecheck-python:tilediiif.tools",
      "category": "30.maintain",
      "description": "Typecheck tilediiif.tools with mypy",
      "steps": [
        {
          "exec": "\\\n        cd \"tilediiif.tools\" \\\n        && poetry run mypy --namespace-packages \\\n          -p tilediiif.tools \\\n          -p tests -p integration_tests"
        }
      ]
    },
    "format-python-code:tilediiif.tools": {
      "name": "format-python-code:tilediiif.tools",
      "category": "30.maintain",
      "description": "Format Python code of tilediiif.tools.",
      "steps": [
        {
          "exec": "cd \"tilediiif.tools\" && poetry run isort . ; poetry run black . ; poetry run flake8"
        }
      ]
    },
    "test:tilediiif.tools": {
      "name": "test:tilediiif.tools",
      "category": "10.test",
      "steps": [
        {
          "exec": "cd \"tilediiif.tools\" && poetry run pytest"
        }
      ]
    },
    "create-release:tilediiif.server": {
      "name": "create-release:tilediiif.server",
      "category": "20.release",
      "description": "Generate a tagged release commit for tilediiif.server using standard-version",
      "steps": [
        {
          "exec": "npx standard-version --commit-all --path . --tag-prefix \"tilediiif.server-v\""
        }
      ],
      "condition": "test \"$(git status --porcelain)\" == \"\"",
      "cwd": "tilediiif.server"
    },
    "ensure-checkout-is-releaseable:tilediiif.server": {
      "name": "ensure-checkout-is-releaseable:tilediiif.server",
      "category": "20.release",
      "description": "Fail with an error if the working copy is not a clean checkout of a tilediiif.server release tag.",
      "steps": [
        {
          "exec": "        test \"$(git rev-parse HEAD)\" == \"$(git rev-parse tags/tilediiif.server-v0.1.0^{commit})\" \\\n          && test \"$(git status --porcelain)\" == \"\" \\\n          || (echo \"Error: the git checkout must be clean and tagged as tilediiif.server-v0.1.0\" 1>&2; exit 1)\n      "
        }
      ]
    },
    "typecheck-python:tilediiif.server": {
      "name": "typecheck-python:tilediiif.server",
      "category": "30.maintain",
      "description": "Typecheck tilediiif.server with mypy",
      "steps": [
        {
          "exec": "\\\n        cd \"tilediiif.server\" \\\n        && poetry run mypy --namespace-packages \\\n          -p tilediiif.server \\\n          -p tests"
        }
      ]
    },
    "format-python-code:tilediiif.server": {
      "name": "format-python-code:tilediiif.server",
      "category": "30.maintain",
      "description": "Format Python code of tilediiif.server.",
      "steps": [
        {
          "exec": "cd \"tilediiif.server\" && poetry run isort . ; poetry run black . ; poetry run flake8"
        }
      ]
    },
    "test:tilediiif.server": {
      "name": "test:tilediiif.server",
      "category": "10.test",
      "steps": [
        {
          "exec": "cd \"tilediiif.server\" && poetry run pytest"
        }
      ]
    },
    "create-release:docker:tilediiif.tools": {
      "name": "create-release:docker:tilediiif.tools",
      "category": "20.release",
      "description": "Generate a tagged release commit for docker:tilediiif.tools using standard-version",
      "steps": [
        {
          "exec": "npx standard-version --commit-all --path . --tag-prefix \"docker/tilediiif.tools-v\""
        }
      ],
      "condition": "test \"$(git status --porcelain)\" == \"\"",
      "cwd": "docker/images/tilediiif.tools"
    },
    "build-docker-image:tilediiif.tools": {
      "name": "build-docker-image:tilediiif.tools",
      "category": "00.build",
      "env": {
        "CONTEXT_DIR": "$(mktemp -d)"
      },
      "steps": [
        {
          "exec": "git worktree add --detach \"$CONTEXT_DIR\" \"docker/tilediiif.tools-v0.1.0\" \\\n&& cd \"$CONTEXT_DIR\" \\\n&& docker image build \\\n  --file \"docker/images/tilediiif.tools/Dockerfile\" \\\n  --tag \"camdl/tilediiif.tools:0.1.0\" --tag \"camdl/tilediiif.tools:0.1\" --tag \"camdl/tilediiif.tools:0\" --tag \"camdl/tilediiif.tools:image0.1.0\" --tag \"camdl/tilediiif.tools:image0.1\" --tag \"camdl/tilediiif.tools:image0\" \\\n   \\\n   \\\n   \\\n  \"$CONTEXT_DIR\" \\\n&& cd - \\\n&& git worktree remove \"$CONTEXT_DIR\""
        }
      ],
      "condition": "! docker image inspect camdl/tilediiif.tools:0.1.0 camdl/tilediiif.tools:0.1 camdl/tilediiif.tools:0 camdl/tilediiif.tools:image0.1.0 camdl/tilediiif.tools:image0.1 camdl/tilediiif.tools:image0 > /dev/null 2>&1"
    },
    "push-docker-image:tilediiif.tools": {
      "name": "push-docker-image:tilediiif.tools",
      "category": "20.release",
      "steps": [
        {
          "spawn": "build-docker-image:tilediiif.tools"
        },
        {
          "exec": "docker image push camdl/tilediiif.tools:0.1.0 camdl/tilediiif.tools:0.1 camdl/tilediiif.tools:0 camdl/tilediiif.tools:image0.1.0 camdl/tilediiif.tools:image0.1 camdl/tilediiif.tools:image0"
        }
      ]
    },
    "foobar": {
      "name": "foobar",
      "steps": [
        {
          "exec": "echo $(git log -1 --pretty=format:%h -- .projenrc.js) a b c"
        }
      ]
    }
  },
  "//": "~~ Generated by projen. To modify, edit .projenrc.js and run \"npx projen\"."
}
