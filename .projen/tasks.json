{
  "tasks": {
    "clobber": {
      "name": "clobber",
      "category": "30.maintain",
      "description": "hard resets to HEAD of origin and cleans the local repo",
      "env": {
        "BRANCH": "$(git branch --show-current)"
      },
      "steps": [
        {
          "exec": "git checkout -b scratch",
          "name": "save current HEAD in \"scratch\" branch"
        },
        {
          "exec": "git checkout $BRANCH"
        },
        {
          "exec": "git fetch origin",
          "name": "fetch latest changes from origin"
        },
        {
          "exec": "git reset --hard origin/$BRANCH",
          "name": "hard reset to origin commit"
        },
        {
          "exec": "git clean -fdx",
          "name": "clean all untracked files"
        },
        {
          "say": "ready to rock! (unpushed commits are under the \"scratch\" branch)"
        }
      ],
      "condition": "git diff --exit-code > /dev/null"
    },
    "install": {
      "name": "install",
      "category": "00.build",
      "description": "Install and upgrade dependencies",
      "steps": [
        {
          "exec": "poetry update"
        }
      ]
    },
    "package": {
      "name": "package",
      "category": "20.release",
      "description": "Creates source archive and wheel for distribution.",
      "steps": [
        {
          "exec": "poetry build"
        }
      ]
    },
    "publish:test": {
      "name": "publish:test",
      "category": "20.release",
      "description": "Uploads the package against a test PyPI endpoint.",
      "steps": [
        {
          "exec": "poetry publish -r testpypi"
        }
      ]
    },
    "publish": {
      "name": "publish",
      "category": "20.release",
      "description": "Uploads the package to PyPI.",
      "steps": [
        {
          "exec": "poetry publish"
        }
      ]
    },
    "create-release-tilediiif.core": {
      "name": "create-release-tilediiif.core",
      "category": "20.release",
      "description": "Generate a tagged release commit for tilediiif.core using standard-version",
      "steps": [
        {
          "exec": "npx standard-version --commit-all --path . --tag-prefix \"tilediiif.core-v\""
        }
      ],
      "cwd": "tilediiif.core"
    },
    "create-release-tilediiif.tools": {
      "name": "create-release-tilediiif.tools",
      "category": "20.release",
      "description": "Generate a tagged release commit for tilediiif.tools using standard-version",
      "steps": [
        {
          "exec": "npx standard-version --commit-all --path . --tag-prefix \"tilediiif.tools-v\""
        }
      ],
      "cwd": "tilediiif.tools"
    },
    "create-release-tilediiif.server": {
      "name": "create-release-tilediiif.server",
      "category": "20.release",
      "description": "Generate a tagged release commit for tilediiif.server using standard-version",
      "steps": [
        {
          "exec": "npx standard-version --commit-all --path . --tag-prefix \"tilediiif.server-v\""
        }
      ],
      "cwd": "tilediiif.server"
    },
    "test": {
      "name": "test",
      "category": "10.test",
      "steps": [
        {
          "exec": "cd tilediiif.tools && poetry run pytest && cd - && cd tilediiif.server && poetry run pytest && cd - && cd tilediiif.core && poetry run pytest"
        }
      ]
    },
    "build-release-docker-image-tilediiif.tools": {
      "name": "build-release-docker-image-tilediiif.tools",
      "category": "00.build",
      "steps": [
        {
          "exec": "\n    docker image build \\\n      --label \"org.opencontainers.image.version=0.1.0\" \\\n      --label \"org.opencontainers.image.revision=$(git rev-parse HEAD)\" \\\n      --tag camdl/tilediiif.tools:0.1.0 \\\n      --build-arg TILEDIIIF_TOOLS_VERSION=0.1.0 \\\n      --build-arg TILEDIIIF_CORE_VERSION=0.1.0 \\\n      --target tilediiif.tools .\n  "
        }
      ],
      "condition": "test \"$(git rev-parse HEAD)\" == \"$(git rev-parse tags/tilediiif.tools-v0.1.0^{commit})\""
    },
    "format-python-code": {
      "name": "format-python-code",
      "category": "30.maintain",
      "description": "(Re)format Python code using Black",
      "steps": [
        {
          "exec": "poetry run isort tilediiif.tools tilediiif.server tilediiif.core ; poetry run black tilediiif.tools tilediiif.server tilediiif.core ; poetry run flake8"
        }
      ],
      "cwd": "/Users/hal/Documents/projects/cudl/tilediiif"
    },
    "typecheck-python-code": {
      "name": "typecheck-python-code",
      "category": "30.maintain",
      "description": "Check Python types",
      "steps": [
        {
          "exec": "poetry run mypy tilediiif.tools tilediiif.server tilediiif.core"
        }
      ],
      "cwd": "/Users/hal/Documents/projects/cudl/tilediiif"
    }
  },
  "env": {
    "VIRTUAL_ENV": "$(poetry env info -p)",
    "PATH": "$(echo $(poetry env info -p)/bin:$PATH)"
  },
  "//": "~~ Generated by projen. To modify, edit .projenrc.js and run \"npx projen\"."
}
